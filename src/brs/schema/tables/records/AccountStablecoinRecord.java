/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables.records;


import brs.schema.tables.AccountStablecoin;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountStablecoinRecord extends UpdatableRecordImpl<AccountStablecoinRecord> implements Record7<Long, Long, Integer, byte[], Long, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DB.account_stablecoin.db_id</code>.
     */
    public void setDbId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.db_id</code>.
     */
    public Long getDbId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>DB.account_stablecoin.id</code>.
     */
    public void setId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.id</code>.
     */
    public Long getId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>DB.account_stablecoin.creation_height</code>.
     */
    public void setCreationHeight(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.creation_height</code>.
     */
    public Integer getCreationHeight() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>DB.account_stablecoin.public_key</code>.
     */
    public void setPublicKey(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.public_key</code>.
     */
    public byte[] getPublicKey() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>DB.account_stablecoin.pledge_balance</code>.
     */
    public void setPledgeBalance(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.pledge_balance</code>.
     */
    public Long getPledgeBalance() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>DB.account_stablecoin.stablecoin_balance</code>.
     */
    public void setStablecoinBalance(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.stablecoin_balance</code>.
     */
    public Double getStablecoinBalance() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>DB.account_stablecoin.debt_stablecoin_balance</code>.
     */
    public void setDebtStablecoinBalance(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>DB.account_stablecoin.debt_stablecoin_balance</code>.
     */
    public Double getDebtStablecoinBalance() {
        return (Double) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Integer, byte[], Long, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Long, Integer, byte[], Long, Double, Double> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.DB_ID;
    }

    @Override
    public Field<Long> field2() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.ID;
    }

    @Override
    public Field<Integer> field3() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.CREATION_HEIGHT;
    }

    @Override
    public Field<byte[]> field4() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.PUBLIC_KEY;
    }

    @Override
    public Field<Long> field5() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.PLEDGE_BALANCE;
    }

    @Override
    public Field<Double> field6() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.STABLECOIN_BALANCE;
    }

    @Override
    public Field<Double> field7() {
        return AccountStablecoin.ACCOUNT_STABLECOIN.DEBT_STABLECOIN_BALANCE;
    }

    @Override
    public Long component1() {
        return getDbId();
    }

    @Override
    public Long component2() {
        return getId();
    }

    @Override
    public Integer component3() {
        return getCreationHeight();
    }

    @Override
    public byte[] component4() {
        return getPublicKey();
    }

    @Override
    public Long component5() {
        return getPledgeBalance();
    }

    @Override
    public Double component6() {
        return getStablecoinBalance();
    }

    @Override
    public Double component7() {
        return getDebtStablecoinBalance();
    }

    @Override
    public Long value1() {
        return getDbId();
    }

    @Override
    public Long value2() {
        return getId();
    }

    @Override
    public Integer value3() {
        return getCreationHeight();
    }

    @Override
    public byte[] value4() {
        return getPublicKey();
    }

    @Override
    public Long value5() {
        return getPledgeBalance();
    }

    @Override
    public Double value6() {
        return getStablecoinBalance();
    }

    @Override
    public Double value7() {
        return getDebtStablecoinBalance();
    }

    @Override
    public AccountStablecoinRecord value1(Long value) {
        setDbId(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value2(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value3(Integer value) {
        setCreationHeight(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value4(byte[] value) {
        setPublicKey(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value5(Long value) {
        setPledgeBalance(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value6(Double value) {
        setStablecoinBalance(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord value7(Double value) {
        setDebtStablecoinBalance(value);
        return this;
    }

    @Override
    public AccountStablecoinRecord values(Long value1, Long value2, Integer value3, byte[] value4, Long value5, Double value6, Double value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountStablecoinRecord
     */
    public AccountStablecoinRecord() {
        super(AccountStablecoin.ACCOUNT_STABLECOIN);
    }

    /**
     * Create a detached, initialised AccountStablecoinRecord
     */
    public AccountStablecoinRecord(Long dbId, Long id, Integer creationHeight, byte[] publicKey, Long pledgeBalance, Double stablecoinBalance, Double debtStablecoinBalance) {
        super(AccountStablecoin.ACCOUNT_STABLECOIN);

        setDbId(dbId);
        setId(id);
        setCreationHeight(creationHeight);
        setPublicKey(publicKey);
        setPledgeBalance(pledgeBalance);
        setStablecoinBalance(stablecoinBalance);
        setDebtStablecoinBalance(debtStablecoinBalance);
    }
}
