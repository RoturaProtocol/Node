/*
 * This file is generated by jOOQ.
 */
package brs.schema.tables;


import brs.schema.Db;
import brs.schema.Keys;
import brs.schema.tables.records.AccountStablecoinRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountStablecoin extends TableImpl<AccountStablecoinRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DB.account_stablecoin</code>
     */
    public static final AccountStablecoin ACCOUNT_STABLECOIN = new AccountStablecoin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountStablecoinRecord> getRecordType() {
        return AccountStablecoinRecord.class;
    }

    /**
     * The column <code>DB.account_stablecoin.db_id</code>.
     */
    public final TableField<AccountStablecoinRecord, Long> DB_ID = createField(DSL.name("db_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>DB.account_stablecoin.id</code>.
     */
    public final TableField<AccountStablecoinRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_stablecoin.creation_height</code>.
     */
    public final TableField<AccountStablecoinRecord, Integer> CREATION_HEIGHT = createField(DSL.name("creation_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DB.account_stablecoin.public_key</code>.
     */
    public final TableField<AccountStablecoinRecord, byte[]> PUBLIC_KEY = createField(DSL.name("public_key"), SQLDataType.VARBINARY(32), this, "");

    /**
     * The column <code>DB.account_stablecoin.pledge_balance</code>.
     */
    public final TableField<AccountStablecoinRecord, Long> PLEDGE_BALANCE = createField(DSL.name("pledge_balance"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>DB.account_stablecoin.stablecoin_balance</code>.
     */
    public final TableField<AccountStablecoinRecord, Double> STABLECOIN_BALANCE = createField(DSL.name("stablecoin_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>DB.account_stablecoin.debt_stablecoin_balance</code>.
     */
    public final TableField<AccountStablecoinRecord, Double> DEBT_STABLECOIN_BALANCE = createField(DSL.name("debt_stablecoin_balance"), SQLDataType.DOUBLE.nullable(false), this, "");

    private AccountStablecoin(Name alias, Table<AccountStablecoinRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountStablecoin(Name alias, Table<AccountStablecoinRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DB.account_stablecoin</code> table reference
     */
    public AccountStablecoin(String alias) {
        this(DSL.name(alias), ACCOUNT_STABLECOIN);
    }

    /**
     * Create an aliased <code>DB.account_stablecoin</code> table reference
     */
    public AccountStablecoin(Name alias) {
        this(alias, ACCOUNT_STABLECOIN);
    }

    /**
     * Create a <code>DB.account_stablecoin</code> table reference
     */
    public AccountStablecoin() {
        this(DSL.name("account_stablecoin"), null);
    }

    public <O extends Record> AccountStablecoin(Table<O> child, ForeignKey<O, AccountStablecoinRecord> key) {
        super(child, key, ACCOUNT_STABLECOIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Db.DB;
    }

    @Override
    public Identity<AccountStablecoinRecord, Long> getIdentity() {
        return (Identity<AccountStablecoinRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountStablecoinRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_STABLECOIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountStablecoinRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ACCOUNT_STABLECOIN_ACCOUNT_ID_HEIGHT_IDX);
    }

    @Override
    public AccountStablecoin as(String alias) {
        return new AccountStablecoin(DSL.name(alias), this);
    }

    @Override
    public AccountStablecoin as(Name alias) {
        return new AccountStablecoin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountStablecoin rename(String name) {
        return new AccountStablecoin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountStablecoin rename(Name name) {
        return new AccountStablecoin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Integer, byte[], Long, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
